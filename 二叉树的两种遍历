/*************************************************************************
        > File Name: 22.二叉树的两种遍历.c
        > Author:SJQ
        > Mail:3505224319@qq.com
        > Created Time: Fri 24 May 2024 04:42:30 PM CST
 ************************************************************************/

#include<stdio.h>
#include <stdlib.h>
#include <time.h>
#define MAX_NODE 10
typedef struct Node
{
    int key;
    struct Node* lchild,*rchild;
}Node;

Node* init_node(int key)
{
    Node* node=(Node*)malloc(sizeof(Node));
    node->key=key;
    node->lchild=node->rchild=NULL;
    return node;
}

Node* insert(Node* root,int key)
{
    if(root==NULL)return init_node(key);
    if(rand()%2)root->lchild=insert(root->lchild,key);
    else root->rchild=insert(root->rchild,key);
    return root;
}

Node* queue[MAX_NODE+5];
int head,tail;

void bfs(Node* root)
{
    head=tail=0;
    queue[tail++]=root;
    while(head<tail)
    {
        Node* node=queue[head];
        printf("ndoe:%d\n",node->key);
        if(node->lchild)
        {
            queue[tail++]=node->lchild;
            printf("node:%d->%d(left)\n",node->key,node->lchild->key);
        }
        if(node->rchild)
        {
            queue[tail++]=node->rchild;
            printf("node:%d->%d(right)\n",node->key,node->rchild->key);
        }
        head++;
    }
    return ;
}
int tot=0;
void dfs(Node* root)
{
    int start,end;
    tot++;
    start=tot;
    if(root->lchild) dfs(root->lchild);
    if(root->rchild) dfs(root->rchild);
    tot++;
    end=tot;
    printf("%d:[%d,%d]\n",root->key,start,end);
}


void clear_tree(Node* root)
{
    if(root==NULL)return ;
    clear_tree(root->lchild);
    clear_tree(root->rchild);
    free(root);
    return ;
}

int main()
{
    srand((unsigned)time(0));
    Node* root=NULL;
    for(int i=0;i<MAX_NODE;i++)
    {
        root=insert(root,rand()%100);
    }
    bfs(root);
    dfs(root);

    clear_tree(root);
    return 0;
}
