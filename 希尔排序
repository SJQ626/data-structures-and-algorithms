/*************************************************************************
        > File Name: 32.希尔排序.c
        > Author:SJQ
        > Mail:3505224319@qq.com
        > Created Time: Tue 04 Jun 2024 03:35:42 PM CST
 ************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#define MAX_ARR 100000
#define swap(a,b)\
{\
    __typeof(a) __c=a;\
    a=b,b=__c;\
}
#define TEST(func,arr,l,n)\
{\
    printf("test:%s\n",#func);\
    int* t=(int *)malloc(sizeof(int )*n);\
    memcpy(t,arr,n);\
    long long a=clock();\
    func(t,l,n);\
    long long b=clock();\
    if(check(t,n))printf("OK %lldms\n",(b-a)*1000/CLOCKS_PER_SEC);\
    else printf("FAIL\n");\
    free(t);\
}

int check(int *t,int n)
{
    for(int i=1;i<n;i++)
    {
        if(t[i-1]>t[i])return 0;
    }
    return 1;
}

int *init_arr(int n)
{
    int* arr=(int*)malloc(sizeof(int)*n);
    for(int i=0;i<n;i++)arr[i]=rand()%100000;
    return arr;
}

void UC_insert(int *arr,int l,int r,int step)
{
    int min=l;
    for(int i=step+l;i<r;i+=step)
    {
        if(arr[min]>arr[i])min=i;
    }
    while(min>l)
    {
        swap(arr[min],arr[min-step]);
        min=min-step;
    }
    for(int i=l+2*step;i<r;i+=step)
    {
        int j=i;
        while(arr[j]<arr[j-step])
        {
            swap(arr[j],arr[j-step]);
            j=j-step;
        }
    }
    return ;
}

void shell_sort(int *arr,int l,int r)
{
    int k=2,n=r-l,step;
    do
    {
        step=(n/k)==0?1:(n/k);
        for(int i=l;i<l+step;i++)
        {
            UC_insert(arr,i,r,step);
        }
        k*=2;
    }while(step!=1);
    return ;
}

void shell_sort_hibbard(int* arr,int l,int r)
{
    int step=1,n=r-l;
    while(step<=n/2)step=step*2+1;
    do
    {
        step/=2;
        for(int i=l;i<step+l;i++)
        {
            UC_insert(arr,i,r,step);
        }
    }while(step>1);
    return ;
}

int main()
{
    srand((unsigned)time(0));
    int *arr=init_arr(MAX_ARR);
    TEST(shell_sort,arr,0,MAX_ARR);
    TEST(shell_sort_hibbard,arr,0,MAX_ARR);

    free(arr);
    return 0;
}
